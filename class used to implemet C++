#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cmath>

class Point;
class Rect;
class Line;
class Circle;

class Object {
public:
    virtual void Draw() const = 0;
    virtual void Intersect(const Point& other) const = 0;
    virtual void Intersect(const Rect& other) const = 0;
    virtual void Intersect(const Line& other) const = 0;
    virtual void Intersect(const Circle& other) const = 0;
};

class Point : public Object {
public:
    Point(double x, double y) : x_(x), y_(y) {}

    void Draw() const override {
        std::cout << "point at (" << x_ << ", " << y_ << ")" << std::endl;
    }

    void Intersect(const Point& other) const override {
        std::cout << "The point cannot intersect the point" << std::endl;
    }

    void Intersect(const Rect& other) const override;
    void Intersect(const Line& other) const override;
    void Intersect(const Circle& other) const override;

private:
    double x_;
    double y_;
};

class Rect : public Object {
public:
    Rect(double x1, double y1, double x2, double y2)
        : x1_(x1), y1_(y1), x2_(x2), y2_(y2) {}

    void Draw() const override {
        std::cout << "rect at (" << x1_ << ", " << y1_ << "), ("
                  << x2_ << ", " << y2_ << ")" << std::endl;
    }

    void Intersect(const Point& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Rect& other) const override {
        double x_left = std::max(x1_, other.x1_);
        double y_bottom = std::max(y1_, other.y1_);
        double x_right = std::min(x2_, other.x2_);
        double y_top = std::min(y2_, other.y2_);

        if (x_left < x_right && y_bottom < y_top) {
            std::cout << "rect and rect have intersections at ("
                      << x_left << ", " << y_bottom << ") and ("
                      << x_right << ", " << y_top << ")" << std::endl;
        } else {
            std::cout << "rect and rect do not have intersections" << std::endl;
        }
    }

    void Intersect(const Line& other) const override;
    void Intersect(const Circle& other) const override;

private:
    double x1_;
    double y1_;
    double x2_;
    double y2_;
};

class Line : public Object {
public:
    Line(double x1, double y1, double x2, double y2)
        : x1_(x1), y1_(y1), x2_(x2), y2_(y2) {}

    void Draw() const override {
        std::cout << "line from (" << x1_ << ", " << y1_ << ") to ("
                  << x2_ << ", " << y2_ << ")" << std::endl;
    }

    void Intersect(const Point& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Rect& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Line& other) const override {
        double det = (x2_-x1_)*(other.y2_-other.y1_) - (y2_-y1_)*(other.x2_-other.x1_);
        if (det == 0) {
            std::cout << "line and line are parallel" << std::endl;
        } else {
            double t1 = ((other.x1_-x1_)*(other.y2_-other.y1_)-(other.y1_-y1_)*(other.x2_-other.x1_))/det;
            double t2 = ((x2_-x1_)*(other.y1_-y1_)-(y2_-y1_)*(other.x1_-x1_))/det;
            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
                double x = x1_ + t1*(x2_-x1_);
                double y = y1_ + t1*(y2_-y1_);
                std::cout << "line and line have intersection at (" << x << ", " << y << ")" << std::endl;
            } else {
                std::cout << "line and line do not have intersections" << std::endl;
            }
        }
    }

    void Intersect(const Circle& other) const override {
        other.Intersect(*this);
    }

private:
    double x1_;
    double y1_;
    double x2_;
    double y2_;
};
class Circle : public Object {
public:
    Circle(double x, double y, double r)
        : x_(x), y_(y), r_(r) {}

    void Draw() const override {
        std::cout << "circle at (" << x_ << ", " << y_ << "), radius = "
                  << r_ << std::endl;
    }

    void Intersect(const Point& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Rect& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Line& other) const override {
        other.Intersect(*this);
    }

    void Intersect(const Circle& other) const override {
        double dx = x_ - other.x_;
        double dy = y_ - other.y_;
        double distance = sqrt(dx*dx + dy*dy);

        if (distance < r_ + other.r_) {
            // Circles intersect
            double d = sqrt((r_ + other.r_ - distance)*(distance + r_ - other.r_)*(distance + other.r_ - r_)*(distance + r_ + other.r_)) / (2 * distance);

            double cx1 = (x_ + other.x_)/2 + (other.x_ - x_)*(r_*r_ - other.r_*other.r_)/(2*distance*distance);
            double cx2 = cx1 + (y_ - other.y_)*d/distance;
            double cx3 = cx1 - (y_ - other.y_)*d/distance;

            double cy1 = (y_ + other.y_)/2 + (other.y_ - y_)*(r_*r_ - other.r_*other.r_)/(2*distance*distance);
            double cy2 = cy1 - (x_ - other.x_)*d/distance;
            double cy3 = cy1 + (x_ - other.x_)*d/distance;

            std::cout << "circles have intersections at (" << cx2 << ", " << cy2
                      << ") and (" << cx3 << ", " << cy3 << ")" << std::endl;
        } else {
            // Circles do not intersect
            std::cout << "circles do not have intersections" << std::endl;
        }
    }

private:
    double x_;
    double y_;
    double r_;
};
